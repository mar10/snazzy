[bdist_wheel]
# set universal = 1 if Python 2 and 3 are supported
;universal = 1

[metadata]
# name = snazzy  # GitHub dependants needs it in setup.py?
version = attr: snazzy.__version__
author = Martin Wendt
author_email = snazzy@wwwendt.de
maintainer = Martin Wendt
maintainer_email = snazzy@wwwendt.de
url = https://github.com/mar10/snazzy/
# download_url =
description = 'Stylish ANSI terminal colors and helpers'
long_description = file: README.md
long_description_content_type = text/markdown
keywords = terminal, console, ansi, escape
license = MIT
license_file = LICENSE
# project_urls	 	dict	38.3.0
# platforms 	list-comma
# provides	 	list-comma
# requires	 	list-comma
# obsoletes	 	list-comma
classifiers =
    Development Status :: 3 - Alpha
    # Development Status :: 4 - Beta
    # Development Status :: 5 - Production/Stable
    Environment :: Console
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    # Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Topic :: Software Development :: Build Tools
    Topic :: System :: Installation/Setup
    Topic :: System :: Software Distribution

[options]
py_modules =
    snazzy

# package_dir =
#     = snazzy
# packages = find:
zip_safe = False

# install_requires =
    # snazzy

# [options.packages.find]
# where = snazzy
# include_package_data = True
# exclude =
#     tests

# --- Coverage Settings --------------------------------------------------------

[coverage:run]
branch = True
omit =
    stressor/stressor_cli.py
    stressor/cli_common.py
    stressor/monitor/*
    tests/*

[coverage:report]
precision = 2
; show_missing = True
sort = Name
exclude_lines =
    pragma: no cover
    if __name__ == .__main__.:

[coverage:html]
directory = build/coverage

# --- Alternative to pytest.ini ------------------------------------------------

[tool:pytest]
# Silence `PytestDeprecationWarning`
junit_family = legacy
; testpaths =
;     tests
;     src


# --- Flake8 Settings ----------------------------------------------------------

[flake8]
# G: enable 'flake8-logging-format'
enable-extensions = G

exclude =
    __pycache__,
    .cache,
    .eggs,
    .git,
    .tox,
    .vscode,
    build,
    dist,
    docs

max-line-length = 99
# max-line-length = 88

# 'mccabe' plugin:
# max-complexity = 12

# max-annotations-complexity = 10
# max-expression-complexity = 10

# Ignore some errors that may be created by Black:
#   - E203 whitespace before ':'
#   - E501 line too long
#   - W503 line break before binary operator
#   - P101 format string does contain unindexed parameters
ignore = E203, E501, W503, P101

# Instead of strict E501, enable B950 for relaxed line length checking (and other bugbear warnings)
# select = B,C,D,E,F,I,N,P,PT,Q,S,T,W,B9

# flake8-docstrings (google, all)
docstring-convention = google

# Options for the flake8-quotes extension:
inline-quotes = double
multiline-quotes = """
docstring-quotes = """
avoid-escape = True
